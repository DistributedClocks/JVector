/*
 * MIT License
 *
 * Copyright (c) 2017 Distributed clocks
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package org.github.com.jvec.vclock;

import java.util.TreeMap;

/**
 * This is the vector clock class, which contains a map of id and time.
 * "id" is a string representing the id of the particular clock entry.
 * "time" is a 64 bit integer denoting the current time value of a clock.
 */
public interface VClock {
    /**
     * Increments the time value of the vector clock "pid" by one.
     * If the specified id does not exist in the map, a new clock with a value of
     * one will be created.
     *
     * @param pid The process id as string representation.
     */
    void tick(String pid);

    /**
     * Sets the time value of the vector clock "pid" to the value "ticks".
     * If the specified id does not exist in the map, a new clock with a value of
     * "ticks" will be created.
     *
     * @param pid   The process id as string representation.
     * @param ticks The value of time to be set as.
     */
    void set(String pid, long ticks);

    /**
     * Returns a copy of the vector clock map. Both clock maps remain valid.
     */
    VClock copy();

    /**
     * Returns the current time value of the clock "pid". If this id does not
     * exist, a negative value is returned.
     *
     * @param pid The process id as string representation.
     */
    long findTicks(String pid);

    /**
     * Returns the most recent update of all the clocks contained in the map.
     * In this context, update means the current highest time value across all
     * clocks.
     */
    long lastUpdate();

    /**
     * Merges the clock map "vc" with a second clock map "other". This operation
     * directly modifies "vc" and will result in "vc" encapsulating "other".
     * If both maps contain the same specific id, the higher time value will be
     * chosen.
     *
     * @param other The vector clock map to merge with.
     */
    void merge(VClockImpl other);

    /**
     * Returns a string representation of the vector map in the following format:
     * {"ProcessID 1": Time1, "ProcessID 2": Time2, ...}
     */
    String returnVCString();

    /**
     * Prints the string generated by returnVCString for a given vector map.
     */
    void printVC();

    /**
     * Get the length of the current clock map.
     */
    int getClockSize();

    /**
     * Get the current vector clock map.
     */
    TreeMap<String, Long> getClockMap();
}
